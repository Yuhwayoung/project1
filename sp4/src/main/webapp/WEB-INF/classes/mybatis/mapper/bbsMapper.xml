<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bbs">
	<insert id="insertBoard" parameterType="com.sp.app.bbs.Board">
		INSERT INTO bbs(num, userId, subject, content, saveFilename, originalFilename,
					hitCount, reg_date)
		VALUES (bbs_seq.NEXTVAL, #{userId}, #{subject}, #{content}, 
				#{saveFilename, jdbcType=VARCHAR}, #{originalFilename, jdbcType=VARCHAR},
				0, SYSDATE)	
	</insert>
	
	<!-- 
	  - 주의 : ${}는 테이블명, 컬럼명이 동적일때 사용하며 값 부분에는 사용하면 오류 발생
	  	   값 부분은 반드시 #{}로 사용하며, #{}는 ?로 치환되어 쿼리는 PreparedStatement 객체로 실행된다.
	  - DBMS_LOB.INSTR() : CLOB 타입에서 검색시 이용
	  - INSTR() 대신 LIKE를 사용하는 경우
	  	subject  LIKE '%' || #{keyword} || '%'
	 -->
	
	<sql id="where-list">
		<choose>
			<when test="condition == 'all' ">
				( INSTR(subject, #{keyword}) &gt; 0
					OR DBMS_LOB.INSTR(content, #{keyword}) &gt;0 )
			</when>
			<when test="condition == 'reg_date' ">
				( TO_CHAR(reg_date, 'YYYY-MM-DD') = #{keyword} 
					OR TO_CHAR(reg_date, 'YYYYMMDD') = #{keyword} )
			</when>
			<when test="condition == 'content' ">
				DBMS_LOB.INSTR(content, #{keyword}) &gt; 0
			</when>
			<otherwise>
				INSTR(${condition}, #{keyword}) &gt; 0
			</otherwise>
		</choose>
	</sql>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM bbs b
		JOIN member1 m ON b.userId = m.userId
		<where>
			<if test="keyword!=null and keyword != '' ">
				<include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<select id="listBoard" parameterType="map" resultType="com.sp.app.bbs.Board">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM (
				SELECT num, b.userId, userName, subject, hitCount,
					TO_CHAR(reg_date, 'YYYY-MM-DD') reg_date,
					saveFilename
				FROM bbs b
				JOIN member1 m ON b.userId = m.userId
				<where>
					<if test="keyword!=null and keyword != '' ">
						<include refid="where-list"/>
					</if>
				</where>
				ORDER BY num DESC
			) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
	</select>
	
	<select id="readBoard" parameterType="Integer" resultType="com.sp.app.bbs.Board">
		SELECT b.num, b.userId, userName, subject, content, reg_date, hitCount,
			saveFilename, originalFilename, NVL(boardLikeCount, 0) boardLikeCount
		FROM bbs b
		JOIN member1 m ON b.userId = m.userId
		LEFT OUTER JOIN (
			SELECT num, COUNT(*) boardLikeCount
			FROM bbsLike
			GROUP BY num
		) bc ON b.num = bc.num
		WHERE b.num = #{num}
	</select>
	
	<update id="updateHitCount" parameterType="Integer">
		UPDATE bbs SET hitCount = hitCount + 1
		WHERE num = #{num}
	</update>
	
	<select id="preReadBoard" parameterType="map" resultType="com.sp.app.bbs.Board">
		SELECT * FROM (
			SELECT num, subject
			FROM bbs b
			JOIN member1 m ON b.userId = m.userId
			<where>
				<if test="keyword != null and keyword != '' ">
					<include refid="where-list"/>
				</if>			
			AND (num &gt; #{num})
			</where>
			ORDER BY num ASC
		) WHERE ROWNUM = 1
	</select>

	<select id="nextReadBoard" parameterType="map" resultType="com.sp.app.bbs.Board">
		SELECT * FROM (
			SELECT num, subject
			FROM bbs b
			JOIN member1 m ON b.userId = m.userId
			<where>
				<if test="keyword != null and keyword != '' ">
					<include refid="where-list"/>
				</if>			
			AND (num &lt; #{num})
			</where>
			ORDER BY num DESC
		) WHERE ROWNUM = 1
	</select>
	
	<update id="updateBoard" parameterType="com.sp.app.bbs.Board">
		UPDATE bbs SET subject = #{subject}, content = #{content},
			saveFilename = #{saveFilename, jdbcType=VARCHAR},
			originalFilename = #{originalFilename, jdbcType=VARCHAR}
		WHERE num = #{num}
	</update>
	
	<delete id="deleteBoard" parameterType="Integer">
		DELETE FROM bbs WHERE num = #{num}
	</delete>
	
	<!-- 게시글 좋아요 추가 -->
	<insert id="insertBoardLike" parameterType="map">
		INSERT INTO bbsLike(num, userId) VALUES (#{num}, #{userId})
	</insert>
	
	<!-- 게시글 좋아요 삭제 -->
	<delete id="deleteBoardLike" parameterType="map">
		DELETE FROM bbsLike WHERE num = #{num} AND userId = #{userId}
	</delete>
	
	<!-- 게시글 좋아요 개수 -->
	<select id="boardLikeCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM bbsLike WHERE num = #{num}
	</select>
	
	<!-- 유저의 게시글 좋아요 버튼 누른 여부 -->
	<select id="userBoardLiked" parameterType="map" resultType="com.sp.app.bbs.Board">
		SELECT num, userId FROM bbsLike
		WHERE num = #{num} AND userId = #{userId}
	</select>
	
	<!-- 댓글 및 답글 등록 -->
	<insert id="insertReply" parameterType="com.sp.app.bbs.Reply">
		INSERT INTO bbsReply(replyNum, num, userId, content, answer, reg_date)
		VALUES (bbsReply_seq.NEXTVAL, #{num}, #{userId}, #{content}, #{answer}, SYSDATE)
	</insert>
	
	<!-- 게시글에 대한 댓글 리스트 -->
	<select id="listReply" parameterType="map" resultType="com.sp.app.bbs.Reply">
	SELECT * FROM (
	    SELECT ROWNUM rnum, tb.* FROM (
	        SELECT r.replyNum, r.userId, userName, num, content, r.reg_date,
	            NVL(answerCount, 0) answerCount,
	            NVL(likeCount, 0) likeCount,
	            NVL(disLikeCount, 0) disLikeCount
	        FROM bbsReply r
	        JOIN member1 m ON r.userId = m.userId
	        LEFT OUTER JOIN(
	            SELECT answer, COUNT(*) answerCount
	            FROM bbsReply WHERE answer != 0 GROUP BY answer
	        ) a ON r.replyNum = a.answer
	        LEFT OUTER JOIN (
	            SELECT replyNum, COUNT(DECODE(replyLike, 1, 1)) likeCount,
	                COUNT(DECODE(replyLike, 0, 1)) disLikeCount
	            FROM bbsReplyLike GROUP BY replyNum
	        ) c ON r.replyNum = c.replyNum
	        WHERE num = #{num} AND r.answer = 0
	        ORDER BY r.replyNum DESC
	    ) tb WHERE ROWNUM &lt; = #{end}
	) WHERE rnum &gt; = #{start}
	</select>
	
	<!-- 게시글에 대한 댓글 개수 -->
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM bbsReply
		WHERE num = #{num} AND answer = 0
	</select>
	
	<!-- 댓글에 대한 답글 개수 -->
	<select id="replyAnswerCount" parameterType="Integer" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM bbsReply
		WHERE answer = #{answer}
	</select>
	
	<!-- 댓글에 대한 답글 리스트 -->
	<select id="listReplyAnswer" parameterType="Integer" resultType="com.sp.app.bbs.Reply">
		SELECT replyNum, num, r.userId, userName, content, reg_date, answer
		FROM bbsReply r
		JOIN member1 m ON r.userId = m.userId
		WHERE answer = #{answer}
		ORDER BY replyNum DESC
	</select>
	
	<delete id="deleteReply" parameterType="map">
		DELETE FROM bbsReply
		WHERE replyNum = #{replyNum}
		<if test="mode=='reply'">
			OR answer = #{replyNum}
		</if>
	</delete>
	
	<!--
	<delete id="deleteReply" parameterType="map">
		DELETE FROM bbsReply WHERE
		<if test="mode=='reply'">
			replyNum IN (
				SELECT replyNum FROM bbsReply
				START WITH replyNum = #{replyNum}
				CONNECT BY PRIOR replyNum = answer
			)
		</if>
		<if test="mode=='answer'">
			replyNum = #{replyNum}
		</if>
	</delete>
	-->
	
	<!-- 좋아요/싫어요 추가 -->
	<insert id="inserReplyLike" parameterType="map">
		INSERT INTO bbsReplyLike(replyNum, userId, replyLike)
		VALUES (#{replyNum}, #{userId}, #{replyLike})
	</insert>
	
	<select id="replyLikeCount" parameterType="map"
			resultType="map">
		SELECT COUNT(DECODE(replyLike,1,1)) likeCount,
				COUNT(DECODE(replyLike,0,1)) dislikeCount
		FROM bbsReplyLike WHERE replyNum = #{replyNum}
	</select>
	
	
</mapper>